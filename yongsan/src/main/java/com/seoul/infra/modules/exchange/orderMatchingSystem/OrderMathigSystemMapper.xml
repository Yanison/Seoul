<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoul.infra.modules.exchange.orderMatchingSystem.OrderMathigSystemMapper">

	<resultMap id="Order" type="com.seoul.infra.modules.exchange.orderMatchingSystem.Order">
		<result property ="memberSeq" column="submittedBy"></result>
		<result property ="cryptoSeq" column="submittedCrypto"></result>
	</resultMap>
	<resultMap id="Order2" type="com.seoul.infra.modules.exchange.orderMatchingSystem.Order">
	</resultMap>
	<resultMap id="Trade" type="com.seoul.infra.modules.exchange.orderMatchingSystem.Trade"></resultMap>
	

 <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ select OB orders start @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
	<select id="selectBOB" resultMap="Order">
		select
			obSeq
			,submittedBy
			,submittedCrypto
			,format(obAmount,3)as obAmount
			,price
			,orderType
			,bos
			,orderStatus
			,timestamp
			,Round((price * obAmount)) as totalPrice
			,Round((price / (select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and date(timestamp) = curdate() -1 order by transactionSeq desc limit 1))*100) as ratio
			,Round((obAmount / (select o.obAmount from orderBook o where 1=1 and o.submittedCrypto = #{cryptoSeq} order by o.obAmount desc limit 1))*100) as amountRatio
		from orderBook
			where 1=1
			and bos = 0
			and orderStatus = 0  <!-- orderStatus = 0 :: pending -->
			and submittedCrypto = #{cryptoSeq}
			order by price,obSeq
	</select>
	
	<select id="selectBOBOne" resultMap="Order">
		select 
			obSeq
			,submittedBy 
			,submittedCrypto
			,format(obAmount,3)as obAmount
			,price
			,orderType
			,bos
			,orderStatus
			,timestamp
			,Round((price * obAmount)) as totalPrice
			,Round((price / (select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and date(timestamp) = curdate() -1 order by transactionSeq desc limit 1))*100) as ratio
			,Round((obAmount / (select o.obAmount from orderBook o where 1=1 and o.submittedCrypto = #{cryptoSeq} order by o.obAmount desc limit 1))*100) as amountRatio
		from orderBook
			where 1=1
			and bos = 0
			and orderStatus = 0  <!-- orderStatus = 0 :: pending -->
			and submittedCrypto = #{cryptoSeq}
			order by obseq desc limit 1;
	</select>
	
	<select id="selectSOB" resultMap="Order">
		select
			obSeq
			,submittedBy
			,submittedCrypto
			,format(obAmount,3)as obAmount
			,price
			,orderType
			,bos
			,orderStatus
			,timestamp
			,Round((price * obAmount)) as totalPrice
			,Round((price / (select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and date(timestamp) = curdate() -1 order by transactionSeq desc limit 1))*100) as ratio
			,Round((obAmount / (select o.obAmount from orderBook o where 1=1 and o.submittedCrypto = #{cryptoSeq} order by o.obAmount desc limit 1))*100) as amountRatio
		from orderBook
			where 1=1
			and bos = 1
			and orderStatus = 0 <!-- orderStatus = 0 :: pending -->
			and submittedCrypto = #{cryptoSeq}
			order by price,obSeq
	</select>
	
	<select id="selectSOBOne" resultMap="Order">
		select
			obSeq
			,submittedBy
			,submittedCrypto
			,format(obAmount,3)as obAmount
			,price
			,orderType
			,bos
			,orderStatus
			,timestamp
			,Round((price * obAmount)) as totalPrice
			,Round((price / (select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and date(timestamp) = curdate() -1 order by transactionSeq desc limit 1))*100) as ratio
			,Round((obAmount / (select o.obAmount from orderBook o where 1=1 and o.submittedCrypto = #{cryptoSeq} order by o.obAmount desc limit 1))*100) as amountRatio
		from orderBook 
			where 1=1
			and bos = 1
			and orderStatus = 0 <!-- orderStatus = 0 :: pending -->
			and submittedCrypto = #{cryptoSeq}
			<!-- and submittedBy = #{memberSeq} -->
			order by obSeq desc limit 1;
	</select>
	
	<select id="selectOBListForMatching" resultMap="Order">
		select
			obSeq
			,submittedBy
			,submittedCrypto
			,format(obAmount,3)as obAmount
			,price
			,orderType
			,bos
			,orderStatus
			,timestamp
			,Round((price * obAmount)) as totalPrice
		from orderBook
			where 1=1
			<if test=" bos == 0">
			and bos = 1
				<if test=" orderType == 0">and price = #{price}</if>
				<if test=" orderType == 1"><![CDATA[and price >= #{price}]]></if>
			</if>
			<if test=" bos == 1">
			and bos = 0
				<if test=" orderType == 0">and price = #{price}</if>
				<if test=" orderType == 1"><![CDATA[and price <= #{price}]]></if>
			</if>
			and orderStatus = 0
			and submittedCrypto = #{cryptoSeq}
			order by price,obSeq
	</select>
	
	
	<select id="selectOrderStatus" resultType="Integer">
		select orderStatus from OrderBook where 1=1
		and submittedCrypto = #{cryptoSeq}
		and obSeq = #{obSeq}
	</select>
	
	<select id="selectTransacton" resultMap="Order2">
		select 
			transactionSeq,
			cryptoSeq,
			memberSeqSell,
			memberSeqBuy,
			obSeqSell,
			obSeqBuy,
			transactedType,
			amount,
			price,
			date_format(timestamp,"%m/%d") as timestampMD,
            date_format(timestamp,"%T") as timestampR
		from transaction
		where 1=1
		and cryptoSeq = #{cryptoSeq}
		order by transactionSeq desc limit 10;
	</select>
	
	<select id="transactionTable" resultMap="Order2">
		<!-- transaction 테이블 -->
		<![CDATA[
		select
			transactionSeq,
			cryptoSeq,
			memberSeqSell,
			memberSeqBuy,
			obSeqSell,
			obSeqBuy,
			transactedType,
			date_format(timestamp,"%m/%d") as timestampMD,
            date_format(timestamp,"%T") as timestampR,
			price,
			format(amount,3) as amount,
			ROUND((price * amount))
			as tradePrice,
			
			
			
			Round(
			(((select price from transaction
			where 1=1
			and cryptoSeq = #{cryptoSeq}
			and transactionSeq < (select transactionSeq from transaction order by transactionSeq desc limit 1)
			order by transactionSeq desc limit 1) - (select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq}
			order by transactionSeq desc limit 1)) 
							/
			(select price from transaction where 1=1
			and cryptoSeq = #{cryptoSeq}
			and transactionSeq < (select transactionSeq from transaction order by transactionSeq desc limit 1)
			order by transactionSeq desc limit 1))*100,2)
			as ratioRe,
			
			ABS(
			Round((
			((select price from transaction where 1=1 
			and  day(timestamp) = ((select day(timestamp) from transaction where 1=1 order by  day(timestamp) desc limit 1)-1) 
			order by transactionSeq desc limit 1)-(select price from transaction where 1=1 order by transactionSeq desc limit 1)) 
								/ 
			(select price from transaction where 1=1 
			and  day(timestamp) = ((select day(timestamp) from transaction where 1=1 order by  day(timestamp) desc limit 1)-1) 
			order by timestamp desc limit 1))*100,2)
			)
			as ratioPre
			
			
		from transaction
		where 1=1
		and cryptoSeq = #{cryptoSeq}
		order by transactionSeq desc limit 1;
		]]>
	</select>
	
	<select id="marketTable" resultMap="Order2">
	
		<!-- market table -->   
		select
			
			<!-- column-->  cryptoSeq,
			
			<!--  24시간 고가  -->   
			<![CDATA[(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and timestamp >= date_add(now(), interval -24 hour) order by timestamp desc limit 1)]]>
			
			<!-- column--> as high24,
			
			<!--  24시간 저가    -->
			<![CDATA[(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and date(timestamp) = curdate() order by timestamp limit 1)]]>
			
			<!-- column--> as todayLow24,
			
			<!--  24시간 고가  -->   
			<![CDATA[(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and date(timestamp) = curdate() order by timestamp desc limit 1)]]>
			
			<!-- column--> as todayHigh24,
			
			<!--  24시간 저가    -->
			<![CDATA[(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and timestamp >= date_add(now(), interval -24 hour) order by timestamp limit 1)]]>
			
			<!-- column--> as low24,
			
			<!--  일별 거래량    -->
			<![CDATA[
			(select sum(amount) from transaction  where 1=1 and timestamp >= date_add(now(), interval -24 hour) and cryptoSeq = #{cryptoSeq})
			]]>
			
			<!-- column--> as volume24,
			
			<!--  일별 거래대금    -->
			<![CDATA[
			(select sum(price) from transaction  where 1=1 and timestamp >= date_add(now(), interval -24 hour) and cryptoSeq = #{cryptoSeq})]]>
			
			<!-- column--> as cap24,
			
			<!--  최근 가격   --> 
			<![CDATA[(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate() order by transactionSeq desc limit 1)]]>
			
			<!-- column--> as recentPrice,
			
			<!--  전일 종가    -->
			<![CDATA[(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate() -1 order by transactionSeq desc limit 1)]]>
			
			<!-- column--> as closingPrice,
			
			<!--  상승 & 하락 비율    -->
			<![CDATA[ABS(Round((
			((select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate() -1 order by transactionSeq desc limit 1)
			-
			(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate() order by transactionSeq desc limit 1))
			/
			(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate()-1 order by transactionSeq desc limit 1)
			)*100,2))]]>
			
			<!-- column--> as ratioPre,
			<![CDATA[
			ABS(
			((select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate() -1 order by transactionSeq desc limit 1)
			-
			(select price from transaction where 1=1 and cryptoSeq = #{cryptoSeq} and  date(timestamp) = curdate() order by transactionSeq desc limit 1))
			)
			]]> as priceGap
			
			
		from transaction 
		where cryptoSeq = #{cryptoSeq} limit 1;
	
	</select>
	
	<select id="spread" resultMap="Order2">
	<![CDATA[
	select
		b.obSeqBuy, 
		s.obSeqSell,
		b.memberSeqBuy,
		s.memberSeqSell,
		b.bPrice, 
		s.sPrice,
		format(b.bAmount,3) as bAmount,
 		format(s.sAmount,3) as sAmount,
		(b.bPrice - s.sPrice)
		as spread 
	from
		(select @b_n := @b_n + 1 bseq,
			submittedBy as memberSeqBuy,
			obSeq as obSeqBuy,
			price as bPrice,
			obAmount as bAmount 
			from orderBook,(select @b_n := 0) b_n 
			where orderStatus = 0 and bos = 0 and submittedCrypto = #{cryptoSeq} order by obSeq) b
		inner join
		(select @s_n := @s_n + 1 sseq,
			submittedBy as memberSeqSell,
			obSeq as obSeqSell,
			price as sPrice,
			obAmount as sAmount
			from orderBook,(select @s_n := 0) s_n
			where orderStatus = 0 and bos = 1 and submittedCrypto = #{cryptoSeq} order by obSeq) s
	on b.bseq = s.sseq
	]]>
	</select>
 <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ select OB orders end 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
 <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ submit orders  start @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
	
	<insert id="submitBids">
		insert into orderBook(
			price
			,obAmount
			,orderAmount
			,submittedBy
			,submittedCrypto
			,orderType
			,bos
			,timestamp
			
		)
		values(
			#{price}
			,#{obAmount}
			,#{obAmount}
			,#{memberSeq}
			,#{cryptoSeq}
			,#{orderType}
			,0
			,now()
		)
	</insert>
	
	<insert id="submitAsks">
		insert into orderBook(
			price
			,obAmount
			,orderAmount
			,submittedBy
			,submittedCrypto
			,orderType
			,bos
			,timestamp
		)
		values(
			#{price}
			,#{obAmount}
			,#{obAmount}
			,#{memberSeq}
			,#{cryptoSeq}
			,#{orderType}
			,1
			,now()
		)
	</insert>
	
	<select id="drawChart" resultMap="Order2">
			select
			<choose>
				<when test='shTime == "y1"'>
				  year(timestamp) durationSub
				  ,max(price) high
				  ,min(price) low
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  year(tt.timestamp) =  durationSub order by timestamp desc limit 1) closingPrice
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  year(tt.timestamp) =  durationSub order by timestamp limit 1) startPrice
				from transaction t where cryptoSeq =  #{cryptoSeq} 
				group by 
					durationSub 
				order by 
					durationSub desc
				</when>
				<when test='shTime == "d1"'>
				  date(timestamp) durationSub
				  ,max(price) high
				  ,min(price) low
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  date(tt.timestamp) =  durationSub order by timestamp desc limit 1) closingPrice
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  date(tt.timestamp) =  durationSub order by timestamp limit 1) startPrice
				from transaction t where cryptoSeq =  #{cryptoSeq} 
					group by 
						durationSub 
					order by 
						durationSub desc 
				</when>
				<when test='shTime == "h1"'>
				  date(timestamp) duration
				  ,hour(timestamp) durationSub
				  ,max(price) high
				  ,min(price) low
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  hour(tt.timestamp) =  durationSub order by timestamp desc limit 1) closingPrice
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  hour(tt.timestamp) =  durationSub order by timestamp limit 1) startPrice
				from transaction t where cryptoSeq = #{cryptoSeq}
				  group by 
				  duration
				  ,durationSub
				  order by 
				  duration desc
				  ,durationSub desc
				</when>
				<when test='shTime == "m10"'>
				  date(timestamp) duration
				  ,floor(subStr(timestamp,15,2)/10)*10 durationSub
				  ,max(price) high
				  ,min(price) low
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  minute(tt.timestamp) = durationSub order by timestamp desc limit 1) closingPrice
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  minute(tt.timestamp) = durationSub order by timestamp limit 1) startPrice
				from transaction t where cryptoSeq = #{cryptoSeq}
				  group by 
				  duration
				  ,durationSub
				  order by 
				  duration desc
				  ,durationSub desc 
				</when>
				<when test='shTime == "m1"'>
				  date(timestamp) duration
				  ,substr(timestamp,18,2) durationSub
				  ,max(price) high
				  ,min(price) low
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  minute(tt.timestamp) = durationSub order by timestamp desc limit 1) closingPrice
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  minute(tt.timestamp) = durationSub order by timestamp limit 1) startPrice
				from transaction t where cryptoSeq = #{cryptoSeq}
				  group by 
				  duration
				  ,durationSub
				  order by 
				  duration desc
				  ,durationSub desc 
				</when>
				<otherwise>
				 date(timestamp) duration
				  ,hour(timestamp) durationSub
				  ,max(price) high
				  ,min(price) low
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  hour(tt.timestamp) =  durationSub order by timestamp desc limit 1) closingPrice
				  ,(select tt.price from transaction tt where cryptoSeq = #{cryptoSeq} and  hour(tt.timestamp) =  durationSub order by timestamp limit 1) startPrice
				from transaction t where cryptoSeq = #{cryptoSeq}
				  group by 
				  duration
				  ,durationSub
				  order by 
				  duration desc
				  ,durationSub desc
				</otherwise>
			</choose>
			 limit #{limit};
	</select>
<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ submit orders  end\
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
  <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ activate or unactivate Order start
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
 	<update id="delObseq" parameterType="Integer">
 		update orderBook set orderStatus = 1
			where 1=1
			and obSeq = #{obSeq}
 	</update>
 	
 	<update id="completeOrder">
 		update orderBook set orderStatus = 3
			where 1=1
			and orderStatus = 0
			and obSeq = #{obSeq}
 	</update>
  <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ activate or unactivate Order end 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
   <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ update order Amount by trading start
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 --> 	
 	<update id="updtObAmount">
 		update orderBook set obAmount = #{obAmount} 
			where 1=1
			and orderStatus = 0
		 	and obSeq = #{obSeq}
 	</update>
 	
   <!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@@@@@@@@@ update order Amount by trading end 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
 
<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@ insert Transacted Order start
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
 	<insert id="insertTransactions">
 		insert into transaction(
 			memberSeqBuy
			,memberSeqSell
 			,obSeqBuy
 			,obSeqSell
 			,cryptoSeq
 			,timestamp
 			,price
 			,amount
 			,transactedType
 		)
 		values(
 			#{memberSeqBuy}
 			,#{memberSeqSell}
 			,#{obSeqBuy}
 			,#{obSeqSell}
 			,#{cryptoSeq}
 			,now()
 			,#{price}
 			,#{obAmount}
 			,0
 		)
 	</insert>
<!-- @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
@@@@@@@@@@@@@ insert Transacted Order end 
@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
 -->
 
 	<update id="updateUserBalanceA">
 		update exchangeBalance set balance = Round(
	 		<if test="bos == 0">
	 		<![CDATA[
			      (
			        (select e.balance from 
			          (select ee.balance 
			            from exchangeBalance ee 
			            where 1=1 
			            and ee.memberSeq = #{memberSeq}
			            and ee.cryptoSeq = 1
			          )e
			        )
			    	- #{totalPrice}
			      ),0
			    )
			    where 1=1
			    and memberSeq = #{memberSeq}
			    and cryptoSeq = 1;
	 			]]>
	 		</if>
	 		<if test="bos == 1">
	 		<![CDATA[
			      (
			        (select e.balance from 
			          (select ee.balance 
			            from exchangeBalance ee 
			            where 1=1 
			            and ee.memberSeq = #{memberSeq}
			            and ee.cryptoSeq = #{cryptoSeq}
			          )e
			        )
			    	- #{obAmount}
			      ),0
			    )
			    where 1=1
			    and memberSeq = #{memberSeq}
			    and cryptoSeq = #{cryptoSeq};
	 			]]>
	 		</if>
	</update>
	
	
	<update id="updateUserBalanceB">
 		update exchangeBalance set balance = Round(
	 		<if test="bos == 0">
	 		<![CDATA[
			      (
			        (select e.balance from 
			          (select ee.balance 
			            from exchangeBalance ee 
			            where 1=1 
			            and ee.memberSeq = #{memberSeq}
			            and ee.cryptoSeq = #{cryptoSeq}
			          )e
			        )
			    	+ #{obAmount}
			      ),0
			    )
			    where 1=1
			    and memberSeq = #{memberSeq}
			    and cryptoSeq = #{cryptoSeq};
	 			]]>
	 		</if>
	 		<if test="bos == 1">
	 		<![CDATA[
			      (
			        (select e.balance from 
			          (select ee.balance 
			            from exchangeBalance ee 
			            where 1=1
			            and ee.memberSeq = #{memberSeq}
			            and ee.cryptoSeq = 1
			          )e
			        )
			    	+ #{totalPrice}
			      ),0
			    )
			    where 1=1
			    and memberSeq = #{memberSeq}
			    and cryptoSeq = 1;
	 			]]>
	 		</if>
	</update>
 
</mapper>